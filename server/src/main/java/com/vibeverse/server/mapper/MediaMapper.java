package com.vibeverse.server.mapper;

import com.vibeverse.server.dto.request.MediaRequestDto;
import com.vibeverse.server.dto.response.MediaResponseDto;
import com.vibeverse.server.model.Media;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingConstants;
import org.mapstruct.ReportingPolicy;
import org.mapstruct.MappingTarget;

import java.util.List;

// Configure MapStruct as a Spring component
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface MediaMapper {

    /**
     * Converts a Media entity to a MediaResponseDto.
     * Handles mapping of List<String> and Map<String, Object> automatically.
     *
     * @param media The Media entity.
     * @return The corresponding MediaResponseDto.
     */
    MediaResponseDto toDto(Media media);

    /**
     * Converts a MediaRequestDto to a Media entity for creation.
     * Fields like ID and timestamps are ignored as they are set by JPA/DB.
     * Relationships (like vibeBoard) are ignored as they are managed separately.
     *
     * @param mediaRequestDto The MediaRequestDto.
     * @return The corresponding Media entity.
     */
    @Mapping(target = "mediaId", ignore = true) // ID is generated by DB
    @Mapping(target = "createdAt", ignore = true) // Timestamps handled by entity annotations
    @Mapping(target = "updatedAt", ignore = true) // Timestamps handled by entity annotations
    @Mapping(target = "vibeBoard", ignore = true) // Relationships are managed separately
    Media toEntity(MediaRequestDto mediaRequestDto);

    /**
     * Updates an existing Media entity from a MediaRequestDto.
     * Fields like ID and timestamps are ignored as they should not be updated via this method.
     * Relationships (like vibeBoard) are ignored.
     *
     * @param mediaRequestDto The MediaRequestDto with updated data.
     * @param media The existing Media entity to update (@MappingTarget).
     */
    @Mapping(target = "mediaId", ignore = true) // ID cannot be updated
    @Mapping(target = "createdAt", ignore = true) // Timestamps handled by entity annotations
    @Mapping(target = "updatedAt", ignore = true) // Timestamps handled by entity annotations
    @Mapping(target = "vibeBoard", ignore = true) // Relationships are managed separately
    void updateEntityFromDto(MediaRequestDto mediaRequestDto, @MappingTarget Media media);

    /**
     * Converts a list of Media entities to a list of MediaResponseDto.
     *
     * @param mediaList The list of Media entities.
     * @return The corresponding list of MediaResponseDto.
     */
    List<MediaResponseDto> toDtoList(List<Media> mediaList);
}