package com.vibeverse.server.mapper;

import com.vibeverse.server.dto.request.BadgeRequestDto;
import com.vibeverse.server.dto.response.BadgeResponseDto;
import com.vibeverse.server.model.Badge;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingConstants;
import org.mapstruct.ReportingPolicy;
import org.mapstruct.MappingTarget; // Import MappingTarget

import java.util.List;

// @Mapper annotation configures MapStruct.
// componentModel = "spring" makes the generated mapper a Spring bean.
// unmappedTargetPolicy = ReportingPolicy.IGNORE prevents build errors if DTO/Entity have unmatched fields (handle carefully).
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface BadgeMapper {

    /**
     * Converts a Badge entity to a BadgeResponseDto.
     *
     * @param badge The Badge entity.
     * @return The corresponding BadgeResponseDto.
     */
    BadgeResponseDto toDto(Badge badge);

    /**
     * Converts a BadgeRequestDto to a Badge entity for creation.
     * Fields like ID and timestamps are ignored as they are set by JPA/DB.
     *
     * @param badgeRequestDto The BadgeRequestDto.
     * @return The corresponding Badge entity.
     */
    @Mapping(target = "badgeId", ignore = true) // ID is generated by DB
    @Mapping(target = "createdAt", ignore = true) // Timestamps handled by entity annotations
    @Mapping(target = "updatedAt", ignore = true) // Timestamps handled by entity annotations
    Badge toEntity(BadgeRequestDto badgeRequestDto);

    /**
     * Updates an existing Badge entity from a BadgeRequestDto.
     * Fields like ID and timestamps are ignored as they should not be updated via this method.
     *
     * @param badgeRequestDto The BadgeRequestDto with updated data.
     * @param badge The existing Badge entity to update (@MappingTarget).
     */
    @Mapping(target = "badgeId", ignore = true) // ID cannot be updated
    @Mapping(target = "createdAt", ignore = true) // Timestamps handled by entity annotations
    @Mapping(target = "updatedAt", ignore = true) // Timestamps handled by entity annotations
    void updateEntityFromDto(BadgeRequestDto badgeRequestDto, @MappingTarget Badge badge);

    /**
     * Converts a list of Badge entities to a list of BadgeResponseDto.
     *
     * @param badges The list of Badge entities.
     * @return The corresponding list of BadgeResponseDto.
     */
    List<BadgeResponseDto> toDtoList(List<Badge> badges);
}