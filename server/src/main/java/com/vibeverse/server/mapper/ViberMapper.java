//package com.vibeverse.server.mapper;
//
//import com.vibeverse.server.dto.request.ViberRequestDto;
//import com.vibeverse.server.dto.response.ViberResponseDto;
//import com.vibeverse.server.model.Viber;
//import org.mapstruct.*;
//
//import java.util.List;
//
//// Configure MapStruct as a Spring component
//@Mapper(componentModel = MappingConstants.ComponentModel.SPRING, unmappedTargetPolicy = ReportingPolicy.IGNORE)
//public interface ViberMapper {
//
//    // Map Viber entity to ViberResponseDto
//    ViberResponseDto toDto(Viber viber);
//
//    // Map ViberRequestDto to Viber entity for creation
//    // Exclude fields that are set separately (like password hash or generated ID/timestamps)
//    @Mapping(target = "id", ignore = true) // ID is generated by DB
//    @Mapping(target = "password", ignore = true) // Password will be hashed and set separately
//    @Mapping(target = "createdAt", ignore = true) // Timestamps are handled by entity annotations
//    @Mapping(target = "updatedAt", ignore = true) // Timestamps are handled by entity annotations
//    // Map relationships - assuming they are managed separately or default to empty collections/null
//    @Mapping(target = "viberMedia", ignore = true)
//    @Mapping(target = "vibeBoards", ignore = true)
//    @Mapping(target = "viberBadges", ignore = true)
//    @Mapping(target = "sentRequests", ignore = true)
//    @Mapping(target = "receivedRequests", ignore = true)
//    Viber toEntity(ViberRequestDto viberRequestDto);
//
//    // Map ViberRequestDto to existing Viber entity for updates
//    // Ignore fields that should not be updated via this DTO (like password, ID, timestamps)
//    @Mapping(target = "id", ignore = true)
//    @Mapping(target = "password", ignore = true) // Password updates should be separate
//    @Mapping(target = "createdAt", ignore = true)
//    @Mapping(target = "updatedAt", ignore = true)
//    @Mapping(target = "viberMedia", ignore = true) // Relationships are managed separately
//    @Mapping(target = "vibeBoards", ignore = true)
//    @Mapping(target = "viberBadges", ignore = true)
//    @Mapping(target = "sentRequests", ignore = true)
//    @Mapping(target = "receivedRequests", ignore = true)
//    void updateEntityFromDto(ViberRequestDto viberRequestDto, @MappingTarget Viber viber);
//
//    // Map a list of entities to a list of DTOs
//    List<ViberResponseDto> toDtoList(List<Viber> vibers);
//}